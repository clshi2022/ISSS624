---
title: "InClassEx05"
editor: visual
---

## Importing the libraries

```{r}
pacman::p_load(sf, tmap, spdep, funModeling, tidyverse, corrplot, ggpubr, blorr, GWmodel, skimr, caret)
```

## Data Import

### Importing water point data

```{r}
Osun_wp_sf <- read_rds("data/rds/Osun_wp_sf.rds")
```

### Importing Boundary data

```{r}
Osun <- read_rds("data/rds/Osun.rds")
```

### Checking the imported water point data

```{r}
Osun_wp_sf %>%
  freq(input = 'status')
```

```{r}
#Viewing INteractive map
tmap_mode('view')
tm_shape(Osun) +
  tm_polygons(alpha = 0.4) +
  tm_shape(Osun_wp_sf) +
  tm_dots(col = 'status',
          alpha =0.6) +
  tm_view(set.zoom.limits = c(9,12))
```

```{r}
#new way to quickly look at the data in a more 'report' format
Osun_wp_sf %>%
  skim()
```

### Select and filter the values that we require

```{r}
Osun_wp_sf_clean <- Osun_wp_sf %>%
  filter_at(vars(status,
                 distance_to_primary_road,
                 distance_to_secondary_road,
                 distance_to_tertiary_road,
                 distance_to_city,
                 distance_to_town,
                 water_point_population,
                 local_population_1km,
                 usage_capacity,
                 is_urban,
                 water_source_clean),
            all_vars(!is.na(.))) %>%
  mutate(usage_capacity = as.factor(usage_capacity))
```

## Correlation Analysis

```{r}
Osun_wp <- Osun_wp_sf_clean %>%
  select(c(7, 35:39, 42:43,46:47, 57)) %>%
  st_set_geometry(NULL)
```

```{r}
cluster_vars.cor = cor(
  Osun_wp[,2:7])
corrplot.mixed(cluster_vars.cor,
               lower = 'ellipse',
               upper = 'number',
               tl.pos = 'lt',
               diag = 'l',
               tl.col = 'black')
```

## Normal Log Regression

```{r}
model <- glm(status ~ distance_to_primary_road +
              distance_to_secondary_road +
              distance_to_tertiary_road +
              distance_to_city +
              distance_to_town +
              is_urban +
              usage_capacity +
              water_source_clean +
              water_point_population +
              local_population_1km,
            data = Osun_wp_sf_clean,
            family = binomial(link = 'logit'))
```

Instead of using typical R report, we use blr_regress() from the blorr package

```{r}
blr_regress(model)
```

```{r}
blr_confusion_matrix(model, cutoff = 0.5)
```

## Spatial Log Regression

### Converting to spatial point data frame

```{r}
Osun_wp_sp <- Osun_wp_sf_clean %>%
  select(c(status,
           distance_to_primary_road,
           distance_to_secondary_road,
           distance_to_tertiary_road,
           distance_to_city,
           distance_to_town,
           water_point_population,
           local_population_1km,
           usage_capacity,
           is_urban,
           water_source_clean)) %>%
  as_Spatial()

Osun_wp_sp
```

```{r}
bw.fixed <- bw.ggwr(status ~
                      distance_to_primary_road +
                      distance_to_secondary_road +
                      distance_to_tertiary_road +
                      distance_to_city +
                      distance_to_town +
                      water_point_population +
                      local_population_1km +
                      is_urban +
                      usage_capacity +
                      water_source_clean,
                    data = Osun_wp_sp,
                    family = 'binomial',
                    approach = 'AIC',
                    kernel = 'gaussian',
                    adaptive = FALSE,
                    longlat = FALSE)
```

### Retrieve the Bandwidth value

```{r}
bw.fixed
```

```{r}
gwlr.fixed <- ggwr.basic(status ~
                      distance_to_primary_road +
                      distance_to_secondary_road +
                      distance_to_tertiary_road +
                      distance_to_city +
                      distance_to_town +
                      water_point_population +
                      local_population_1km +
                      is_urban +
                      usage_capacity +
                      water_source_clean,
                    data = Osun_wp_sp,
                    family = 'binomial',
                    bw = 2599.672,
                    kernel = 'gaussian',
                    adaptive = FALSE,
                    longlat = FALSE)
```

### Setting up Confusion Matrix for Viewing

To assess the performance of the gwLR, firstly, we will convert the SDF object in as data frame by using the code chunk below

```{r}
gwr.fixed <- as.data.frame(gwlr.fixed$SDF)
```

Next we will label yhat values greater of equal to 0.5 into 1 and else 0. the result of the logic comparison operation

```{r}
gwr.fixed <- gwr.fixed %>%
  mutate(most = ifelse(
    gwr.fixed$yhat >= 0.5, T, F))
```

```{r}
gwr.fixed$y <- as.factor(gwr.fixed$y)
gwr.fixed$most <- as.factor(gwr.fixed$most)
CM <- confusionMatrix(data = gwr.fixed$most, reference = gwr.fixed$y)
CM
```

```{r}
Osun_wp_sf_selected <- Osun_wp_sf_clean %>%
  select(c(ADM2_EN, ADM2_PCODE,
             ADM1_EN, ADM1_PCODE,
             status))
```

```{r}
gwr_sf.fixed <-cbind(Osun_wp_sf_selected, gwr.fixed)
```

```{r}
tmap_mode('view')
prob_T <- tm_shape(Osun) +
  tm_polygons(alpha = 0.1) +
  tm_shape(gwr_sf.fixed) +
  tm_dots(col = 'yhat',
          border.col = 'gray60',
          border.lwd = 1) +
  tm_view(set.zoom.limits = c(8,14))
prob_T
```

## Dropping the non-significant variables after checking the results from the 1st log regression

```{r}
Osun_wp_sf_clean2 <- Osun_wp_sf_clean %>%
  select(c(-'distance_to_primary_road', -'distance_to_secondary_road'))
```

```{r}
model2 <- glm(status ~ 
              distance_to_tertiary_road +
              distance_to_city +
              distance_to_town +
              is_urban +
              usage_capacity +
              water_source_clean +
              water_point_population +
              local_population_1km,
            data = Osun_wp_sf_clean2,
            family = binomial(link = 'logit'))
```

Visualise the output again

```{r}
blr_regress(model2)
```

ok, the nin-significant values had been removed

### Converting to spatial point data frame

```{r}
Osun_wp_sp2 <- Osun_wp_sf_clean2 %>%
  select(c(status,
           distance_to_tertiary_road,
           distance_to_city,
           distance_to_town,
           water_point_population,
           local_population_1km,
           usage_capacity,
           is_urban,
           water_source_clean)) %>%
  as_Spatial()

Osun_wp_sp2
```

```{r}
bw2.fixed <- bw.ggwr(status ~
                      distance_to_tertiary_road +
                      distance_to_city +
                      distance_to_town +
                      water_point_population +
                      local_population_1km +
                      is_urban +
                      usage_capacity +
                      water_source_clean,
                    data = Osun_wp_sp2,
                    family = 'binomial',
                    approach = 'AIC',
                    kernel = 'gaussian',
                    adaptive = FALSE,
                    longlat = FALSE)
```

### Retrieve the Bandwidth value

```{r}
bw2.fixed
```

```{r}
gwlr2.fixed <- ggwr.basic(status ~
                      distance_to_tertiary_road +
                      distance_to_city +
                      distance_to_town +
                      water_point_population +
                      local_population_1km +
                      is_urban +
                      usage_capacity +
                      water_source_clean,
                    data = Osun_wp_sp2,
                    family = 'binomial',
                    bw = 2377.371,
                    kernel = 'gaussian',
                    adaptive = FALSE,
                    longlat = FALSE)
```

### Setting up Confusion Matrix for Viewing

To assess the performance of the gwLR, firstly, we will convert the SDF object in as data frame by using the code chunk below

```{r}
gwr2.fixed <- as.data.frame(gwlr2.fixed$SDF)
```

Next we will label yhat values greater of equal to 0.5 into 1 and else 0. the result of the logic comparison operation

```{r}
gwr2.fixed <- gwr2.fixed %>%
  mutate(most = ifelse(
    gwr2.fixed$yhat >= 0.5, T, F))
```

```{r}
gwr2.fixed$y <- as.factor(gwr2.fixed$y)
gwr2.fixed$most <- as.factor(gwr2.fixed$most)
CM <- confusionMatrix(data = gwr2.fixed$most, reference = gwr2.fixed$y)
CM
```

```{r}
Osun_wp_sf_selected2 <- Osun_wp_sf_clean2 %>%
  select(c(ADM2_EN, ADM2_PCODE,
             ADM1_EN, ADM1_PCODE,
             status))
```

```{r}
gwr_sf2.fixed <-cbind(Osun_wp_sf_selected2, gwr.fixed)
```

```{r}
tmap_mode('view')
prob_T2 <- tm_shape(Osun) +
  tm_polygons(alpha = 0.1) +
  tm_shape(gwr_sf2.fixed) +
  tm_dots(col = 'yhat',
          border.col = 'gray60',
          border.lwd = 1) +
  tm_view(set.zoom.limits = c(8,14))
prob_T2
```

## 
