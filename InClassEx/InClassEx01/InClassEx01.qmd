---
title: "In-clsss Exercise 1"
editor: visual
---

## Data Preparation

The code chunk below will install and load tidyverse and sf packages

```{r}
pacman::p_load(sf,tidyverse,tmap,spdep, knitr)

```

importing

```{r}
hunan <- st_read(dsn = 'data/geospatial',
                 layer = 'Hunan')
```

Importing attribute data in csv

```{r}
hunan2012 = read_csv('data/aspatial/Hunan_2012.csv')
```

Performing relational join

```{r}
hunan <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```

Visualising the Regional Development Indicator

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.3)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

## Computing Contiguity Spatial Weights (Queen and Rook)

Computing contiguity spatial weights using poly2nb(). note that this defaults to "Queen"

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)

#code to view all neighbouring polygons for x, in this example the 1st polygon:
wm_q[[1]]

#get the name, this is basically like accessing a dictionary
hunan$County[1]

#get the names of the neighbouring countries
hunan$NAME_3[c(2,3,4,57,85)]

#retrive the GDPPC of various countries, this example identifies the neighbours before extracting their GDPPC
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1

#list down the whole weight matrix. note that str is not "string" but "structure"
str(wm_q)
```

Creating weight matrix with rook (instead of queen). as mentioned above, the poly2nb() defaults to queen. just need to set the flag to false to use rook

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

Visualising contiguity weights. this shows lines for connectivity. usually this is calculated based on centroid.s the centroids would need to be calculated with the sf package first

```{r}
#longtitude with [[1]]
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
#latitude with [[2]]
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
#put them together into a new variable called coord
coords <- cbind(longitude, latitude)
#check the new variable
head(coords)
```

Plotting the contiguity based neighbor map (queens method)

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

Plotting the contiguity based neighbor map (Rook method)

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

Plotting both together (note, they don't look very different)

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red", main="Queen Contiguity")
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red", main="Rook Contiguity")
```

## Computing Distance Based Neighbours

Derive distance based neighbours using dnearneigh() from spdep package

Determining the cut-off distance

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

Computing the distance weight matrix

```{r}
#set cut off distance from 0 to 62
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
#check what is inside
wm_d62
#check structure
str(wm_d62)
#alternate way to display structure using table() and card()
table(hunan$County, card(wm_d62))
#alternate way to check weights
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
#alternate way to check weights
table(n_comp$comp.id)
```

Plotting fixed distance weight matrix

```{r}
#just drawing the map
plot(hunan$geometry, border="lightgrey")
#drawsthe links of neightbours with cut off distance at 62km. note that coords is from the previous generated variable from longitute and latitute
plot(wm_d62, coords, add=TRUE)
#drawing the weight matrix (length doesn't seem to do anything?)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

we can plot them seperately

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(k1, coords, add=TRUE, col="red", length=0.08, main="1st nearest neighbours")
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main="Distance link")
```

## Computing Adaptive distance weight matrix

controlling the number of neighbours using k-nearest neighbours

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
#displaying summary
knn6
#displaying content
str(knn6)
```

Plotting distance based Neighbour

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

Weights based on IDW

Computing distances between areas by using nbdists()

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

Row-standardised weights matrix

```{r}
#note that i need to learn more about the styles
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
#Check variable
rswm_q
#This can be used to check the weight of the first polygon's eight neighbour
rswm_q$weights[10]
```

Alternative way to derive a row standardised distance weight matrix

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
#checking the weights
rswm_ids$weights[1]
#checking the summary
summary(unlist(rswm_ids$weights))
```

Application of Spatial Weight Matrix

creating 4 spatial lagged variables

-   spatial lag with row-standardised weights

-   spatial lag as a sum of neighbouring values

-   spatial window average

-   spatial window sum

Spatial lag with row-standardised weights

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

Show the GDPCC of Hunan

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

Add the spatially lagged GDPPC values onto hunan sf data frame

```{r}
#rswm is row standardised weight matrix
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)

#show the average neighbouring income values
head(hunan)
```

plot GDPPC and lag GDPPC for comparison

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

spatial lag as a sum of neighbouring values using glist = in the nb2listw function

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With the weights assigned, we can now apply .listw to compute a lag variable

```{r}
#this is actually the same code as above, but the weight variable has changed
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")

#examing the results
lag_sum
```

Append into hunan sf data frame

```{r}
hunan <- left_join(hunan, lag.res)
```

Plotting GDPPC and Spatial lag sum GDPPC

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

Spatial window average. this uses row standardised weights plus the diagonal element. so we need to add the diagonal element before assigning weights. this is done using include.self() from spdep

```{r}
wm_qs <- include.self(wm_q)

#Check neighboour. note that it now has 6 neighbour instead of 5
wm_qs[[1]]
```

get weights by nb2listw90

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

Create lag variable using the new weight structure

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

converting the lag variable listw object into a data frame

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

Append the lag window average value into hunan sf data frame

```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```

plotting via kable of knitr package

```{r}
#kable looks like a tabe package
hunan %>%
  select("County", "lag GDPPC", "lag_window_avg GDPPC") %>%
  kable()
```

visually plot the new lag_GDPPC and w_ave_gdppc

```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

Spatial Window sum

This is the counter part of the window average but without using row-standardised weights

add diagonal first

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

add binary weights

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
#checking 1st data. note that it now has 5 neighbours
b_weights[1]
```

using nb2list() and glist() to explicting assign weight values

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

computing lag varibale with listw()

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Converting into data frame with as.data.frame

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

Appending into hunan sf data frame

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

plotting via kable

```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

visually plotting the new weights using qtm() of tmap

```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```
